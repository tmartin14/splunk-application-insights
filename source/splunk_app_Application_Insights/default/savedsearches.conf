[base_search_host_list]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = splunk_app_Application_Insights
request.ui_dispatch_view = search
search = index=* (tag=oshost OR tag=web OR tag=appserver OR tag=loadbalancer) tag=performance |  stats dc(host) by host, tag


[base_search_web_server]
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
enableSched = 1

action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","garbage_collection_time"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.show = 0
request.ui_dispatch_app = splunk_app_Application_Insights
request.ui_dispatch_view = search
search = index=* tag=web tag=activity web_server=*\
| eval 2xx=if(status >= 200 AND status < 300, status, null()), \
       3xx=if(status >= 300 AND status < 400, status, null()), \
       4xx=if(status >= 400 AND status < 500, status, null()), \
       5xx=if(status >= 500 AND status < 600, status, null()),\
       error=if(status >= 400, "error", null()) \
| stats count(_raw) as requests, avg(response_time) as "Avg. Response Time (ms)", count(2xx) as 2xx, count(3xx) as 3xx, count(4xx) as 4xx, count(5xx) as 5xx, count(error) as errors\
     by host, site, web_server, uri_path, _time\
| addinfo \
| eval rpm=((requests)/(info_max_time - info_min_time))*60, error_rate = round(errors/requests*100,0)\
\
| rename rpm as "Requests Per Minute", requests as "Total Requests" \
| fields + host, site, web_server, uri_path, "Total Requests", "Requests Per Minute", "Avg. Response Time (ms)", 2xx, 3xx, 4xx, 5xx, errors, error_rate

[base_search_app_server]
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_view = search
search = index=* tag=appserver  tag=performance \
\
| eval generated_active_threads_count=if(thread_state="active",1,0),\
       generated_hung_threads_count=if(thread_state="hung",1,0)\
| eval active_threads = coalesce(generated_active_threads_count, currentThreadsBusy),\
       hung_threads_count = coalesce(generated_hung_threads_count, hung_threads_count)\
| eval 2xx=if(status >= 200 AND status < 300, status, null()), \
       3xx=if(status >= 300 AND status < 400, status, null()), \
       4xx=if(status >= 400 AND status < 500, status, null()), \
       5xx=if(status >= 500 AND status < 600, status, null()),\
       errors=if(status >= 400, 1, 0),\
       requests=if(isNull(status),0,1),\
       uri_path=if(isnull(request_uri),"",request_uri)\
| addinfo \
| eval rpm=((requests)/(info_max_time - info_min_time))*60\
\
| stats \
avg(available_threads_count_percent) as "Available Threads (%)",  \
avg(memory_heap_free_percent)        as "Heap Memory Free (%)",  \
avg(garbage_collection_time)         as "Garbage Collection Time (ms)"\
avg(response_time)                   as "Average Response Time (ms)"\
avg(active_sessions_count)           as "Active Sessions" \
avg(memory_heap_size)                as "Memory Heap Size (MB)"\
avg(memory_heap_used)                as "Memory Heap Used (MB)"\
avg(garbage_collection_count)        as "Garbage Collections (count)"\
avg(active_threads)                  as "Average Active Threads (count)",\
avg(hung_threads_count)              as "Average Hung Threads (count)",\
sum(requests)                        as requests, \
count(2xx)                           as 2xx, \
count(3xx)                           as 3xx, \
count(4xx)                           as 4xx, \
count(5xx)                           as 5xx, \
sum(errors)                          as errors,\
avg("rpm")                           as "Requests Per Minute"\
by host, _time, uri_path

[base_search_app_server_logs]
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
request.ui_dispatch_view = search
search = index=* tag=appserver  tag=performance tag=web\
| eval 2xx=if(status >= 200 AND status < 300, status, null()), \
       3xx=if(status >= 300 AND status < 400, status, null()), \
       4xx=if(status >= 400 AND status < 500, status, null()), \
       5xx=if(status >= 500 AND status < 600, status, null()),\
       error=if(status >= 400, "error", null()) \
| stats count(_raw) as requests, count(2xx) as 2xx, count(3xx) as 3xx, count(4xx) as 4xx, count(5xx) as 5xx, count(error) as errors\
     by  request_uri, host, _time\
| addinfo \
| eval rpm=((requests)/(info_max_time - info_min_time))*60, error_rate = round(errors/requests*100,0)\
\
| rename rpm as "Requests Per Minute", requests as "Total Requests", request_uri as uri_path\
| fields + host uri_path, "Total Requests", "Requests Per Minute", 2xx, 3xx, 4xx, 5xx, errors, error_rate


[base_search_appserver_jmx]
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.page.search.mode = verbose
request.ui_dispatch_view = search
search = index=* tag=appserver  tag=performance \
\
| eval generated_active_threads_count=if(thread_state="active",1,0),\
       generated_hung_threads_count=if(thread_state="hung",1,0)\
| eval active_threads = coalesce(generated_active_threads_count, currentThreadsBusy),\
       hung_threads_count = coalesce(generated_hung_threads_count, hung_threads_count)\
\
| stats \
avg(available_threads_count_percent) as "Available Threads (%)",  \
avg(memory_heap_free_percent)        as "Heap Memory Free (%)",  \
avg(garbage_collection_time)         as "Garbage Collection Time (ms)"\
avg(response_time)                   as "Average Response Time (ms)"\
avg(active_sessions_count)           as "Active Sessions" \
avg(memory_heap_size)                as "Memory Heap Size (MB)"\
avg(memory_heap_used)                as "Memory Heap Used (MB)"\
avg(garbage_collection_count)        as "Garbage Collections (count)"\
avg(active_threads)                  as "Average Active Threads (count)",\
avg(hung_threads_count)              as "Average Hung Threads (count)"\
by host, _time


[base_search_os]
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
display.general.type = statistics
display.page.search.tab = statistics
search = index=* host=* tag=oshost tag=performance \
| eval \
   storage_used_percent = 100 - storage_free_percent,\
   mem_used_percent = 100 - mem_free_percent, \
   Filesystem=if(isNull(Filesystem),"",Filesystem),\
   bytes_in = bytes_in/1024, \
   bytes_out = bytes_out/1024, \
   diff = abs(bytes_in - bytes_out)\
| stats \
   avg(cpu_load_percent)      as cpu_load_percent,\
   avg(wait_threads_count)    as wait_threads_count,\
   avg(system_threads_count)  as system_threads_count,\
   avg(mem_free_percent)      as mem_free_percent, \
   avg(mem_used_percent)      as mem_used_percent,\
   min(storage_free_percent)  as min_free,\
   avg(storage_free_percent)  as storage_free_percent,\
   avg(storage_used_percent)  as storage_used_percent,\
   avg(read_ops)              as read_ops,\
   avg(write_ops)             as write_ops,\
   avg(packets_in)            as packets_in,\
   avg(packets_out)           as packets_out,\
   avg(bytes_in)              as bytes_in,\
   avg(bytes_out)             as bytes_out,\
   avg(diff)                  as kbps_in_out_difference\
by host, Filesystem, _time

[base_search_load_balancer]
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
search = index=* tag=loadbalancer tag=performance tag=network \
| stats \
avg(rtt) as rtt,\
avg(5XX_codes) as "5XX_codes",\
avg(interface_connections) as "client_connections",\
avg(vip_connections) as "server_connections",\
avg(interface_throughput) as client_throughput, \
avg(vip_throughput) as server_throughput,\
\
avg(sessions) as "Concurrent Sessions",\
avg(ssl_tps) as "SSL Transactions per Second"\
by _time, host


